======================== Load Balancer ======================== 

Ultimate Guide to Load Balancing
1. Introduction to Load Balancing
What is Load Balancing?
Load balancing is a technique used in computing to distribute incoming network traffic or workload across multiple servers, resources, or systems to ensure no single resource is overwhelmed. This ensures high availability, reliability, and performance of applications and services.

Why is Load Balancing Needed?
Imagine a website getting thousands of visitors per second. If all requests were sent to a single server, it would quickly become overloaded, slow down, and possibly crash. A load balancer prevents this by distributing traffic among multiple servers.

Without load balancing:
❌ One server handles all traffic → Overloaded, slow responses, crashes
❌ If the server goes down → Entire application is unavailable

With load balancing:
✅ Traffic is evenly distributed → No single point of failure
✅ Multiple servers handle requests → Faster response times
✅ If one server crashes → Others take over (High Availability)

🛠 Use Cases of Load Balancing
Web Applications – Handle millions of concurrent users (e.g., Facebook, Amazon).
Gaming Servers – Distribute players across different game instances.
Streaming Services – Load balance video streams to avoid buffering (e.g., Netflix, YouTube).
APIs & Microservices – Route requests to different microservices (e.g., authentication, payments).
Databases – Distribute read/write operations across database clusters.


2️⃣ Types of Load Balancing
Load balancers operate at different layers of the OSI model.

1️⃣ Network Load Balancing (Layer 4 - Transport Layer)
Works with TCP & UDP packets.
Routes traffic based on IP addresses & ports.
No deep packet inspection (doesn't read HTTP requests).
Faster than Application Load Balancers.
📌 Example:

A gaming server hosting a multiplayer game.
Players connect via TCP/UDP sockets.
A Network Load Balancer distributes connections based on least connections algorithm.
2️⃣ Application Load Balancing (Layer 7 - Application Layer)
Reads HTTP headers, cookies, request paths (/users, /orders).
Routes requests to specific servers based on content.
Can perform SSL termination (decrypts HTTPS requests).
📌 Example:

A food delivery app with separate services:
/restaurants → Restaurant Microservice
/orders → Order Processing Microservice
/payments → Payment Gateway Microservice
The Application Load Balancer directs each request to the appropriate service.
3️⃣ Global Load Balancing (GSLB - Layer 3 & DNS-Based)
Distributes traffic across multiple data centers worldwide.
Uses Geo-DNS routing to send users to the nearest data center.
Ensures disaster recovery and failover.
📌 Example:

A user in London tries to access Netflix.
A Global Load Balancer sends them to the Europe data center.
If the Europe data center is down, it redirects to the US data center.


3️⃣ Load Balancing Algorithms (Deep Dive into ALL Major Algorithms)
Load balancers decide which server should handle a request based on algorithms.

🔹 1. Round Robin (Basic & Weighted)
✅ How It Works:

Requests are distributed sequentially to each server in a circular manner.
Weighted Round Robin allows stronger servers to get more traffic.
📌 Example:

3 servers (A, B, C). Requests go in order:
First request → Server A
Second request → Server B
Third request → Server C
Fourth request → Back to Server A
🔹 2. Least Connections
✅ How It Works:

Directs new requests to the server with the fewest active connections.
Best for long-lived connections (e.g., database servers).
📌 Example:

2 database servers (A & B):
Server A has 50 connections.
Server B has 20 connections.
Next request goes to Server B.
🔹 3. Least Response Time
✅ How It Works:

Directs traffic to the server with the fastest response time.
Measures latency & load to determine the best server.
📌 Example:

Web servers:
Server A: 100ms response time
Server B: 50ms response time
Next request goes to Server B.
🔹 4. IP Hash
✅ How It Works:

Uses client’s IP address to determine which server they will always connect to.
Ensures session persistence.
📌 Example:

A user with IP 192.168.1.5 always connects to Server A.
🔹 5. Random
✅ How It Works:

Randomly selects a server for each request.
📌 Example:

Best for distributed systems where all servers are equally powerful.
🔹 6. Consistent Hashing
✅ How It Works:

Hashes a request’s IP or data to consistently route it to the same server.
Used in distributed databases.
📌 Example:

Distributed Caching (Redis, Memcached):
Keys are hashed to distribute them across servers.
🔹 7. Adaptive Load Balancing
✅ How It Works:

Uses machine learning to analyze traffic patterns.
Dynamically adjusts traffic distribution based on server performance.
📌 Example:

AI-powered cloud services (AWS, Google Cloud) auto-scale based on demand.

4️⃣ Load Balancing Failover & Health Checks
🔹 Failover – If a server crashes, traffic is redirected to another.
🔹 Health Checks – Load balancers periodically check server status.

✅ How It Works:

Load Balancer sends a ping request to each backend server.
If a server fails, traffic is redirected to a healthy server.
📌 Example:

A banking website has 3 servers.
Server B goes down.
Load Balancer reroutes traffic to Server A & C.

5️⃣ Troubleshooting Load Balancing Issues (Step-by-Step Debugging Guide)
🚨 Issue 1: Slow Response Time
✅ Check: High CPU/memory on backend servers.
✅ Fix: Scale horizontally (add more servers).

🚨 Issue 2: Server Overload
✅ Check: Load balancing algorithm.
✅ Fix: Use Least Connections instead of Round Robin.

🚨 Issue 3: Load Balancer Itself Becomes a Bottleneck
✅ Check: Network bandwidth limits.
✅ Fix: Use multiple load balancers in a cluster.
